import puppeteer from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';
import fs from 'fs/promises';
import path from 'path';
import readline from 'readline';
import { createObjectCsvWriter as createCsvWriter } from 'csv-writer';

puppeteer.use(StealthPlugin());

const BASE_PATH = './';
const COOKIES_PATH = path.join(BASE_PATH, 'cookiesWordstat.json');
const LOGIN_PATH = path.join(BASE_PATH, 'login.txt');
const OUTPUT_CSV = path.join(BASE_PATH, 'unisender_campaigns.csv');

const sleep = ms => new Promise(res => setTimeout(res, ms));

let csvWriter;

function createWriter(append = false) {
    csvWriter = createCsvWriter({
        path: OUTPUT_CSV,
        header: [
            { id: 'title', title: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏' },
            { id: 'time', title: '–í—Ä–µ–º—è' },
            { id: 'date', title: '–î–∞—Ç–∞' },
            { id: 'segment', title: '–°–µ–≥–º–µ–Ω—Ç' },
            { id: 'metric1', title: '–ú–µ—Ç—Ä–∏–∫–∞ 1' },
            { id: 'metric2', title: '–ú–µ—Ç—Ä–∏–∫–∞ 2' },
            { id: 'metric3', title: '–ú–µ—Ç—Ä–∏–∫–∞ 3' },
            { id: 'metric4', title: '–ú–µ—Ç—Ä–∏–∫–∞ 4' }
        ],
        append: append
    });
}

async function waitForUserOnError(error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    return new Promise(resolve => {
        rl.question('–ù–∞–∂–º–∏ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏...', () => {
            rl.close();
            resolve();
        });
    });
}

async function loadCookies(page) {
    try {
        const cookies = JSON.parse(await fs.readFile(COOKIES_PATH, 'utf-8'));
        await page.setCookie(...cookies);
        console.log('‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
        await waitForUserOnError(error);
    }
}

async function tryLoginIfNeeded(page) {
    try {
        await sleep(1500);
        const loginButton = await page.$('.newAuth__loginBtn');
        if (loginButton) {
            console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å...');
            const [email, password] = (await fs.readFile(LOGIN_PATH, 'utf-8'))
                .split('\n')
                .map(l => l.trim());

            await page.type('input[type="email"]', email, { delay: 50 });
            await page.type('input[type="password"]', password, { delay: 50 });

            console.log('‚û° –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...');
            await loginButton.click();
            await page.waitForNavigation({ waitUntil: 'networkidle2' });
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å');

            const newCookies = await page.cookies();
            await fs.writeFile(COOKIES_PATH, JSON.stringify(newCookies, null, 2));
            console.log('üíæ –ö—É–∫–∏ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        } else {
            console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
    } catch (error) {
        await waitForUserOnError(error);
    }
}

async function ensureCorrectPage(page) {
    const target = 'https://cp.unisender.com/ru/v5/campaigns';
    const currentUrl = page.url();
    if (!currentUrl.startsWith(target)) {
        console.log('‚Ü© –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–º–ø–∞–Ω–∏–π –≤—Ä—É—á–Ω—É—é');
        await page.goto(target, { waitUntil: 'networkidle2' });
    }
}

async function parsePage(page) {
    const results = await page.$$eval('.reportCard', cards => {
        return cards.map(card => {
            const badge = card.querySelector('.USBadge');
            if (badge?.textContent.includes('–û—Ç–∫–ª–æ–Ω–µ–Ω–∞')) return null;

            const title = card.querySelector('.reportCard__title')?.textContent.trim() || '';
            const timeBlock = card.querySelector('.reportCard__info .reportCard__time');
            const [time, date] = timeBlock?.textContent.split(',').map(t => t.trim()) || ['', ''];
            const segment = card.querySelector('.reportCard__info .reportCard__list')?.textContent.trim() || '';

            const metricBlocks = card.querySelectorAll('.reportCard__footer .reportAnalyticsItem__valueAbsolute');
            const metrics = Array.from(metricBlocks).map(el => el.textContent.trim());

            return {
                title,
                time,
                date,
                segment,
                metric1: metrics[0] || '',
                metric2: metrics[1] || '',
                metric3: metrics[2] || '',
                metric4: metrics[3] || ''
            };
        }).filter(Boolean);
    });

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
    await csvWriter.writeRecords(results);
    return results.length > 0;
}

async function clickNextPage(page) {
    try {
        const wrapper = await page.$('.reportList__paginationWrapper');
        if (!wrapper) return false;

        const ul = await wrapper.$('.MuiPagination-ul');
        if (!ul) return false;

        const items = await ul.$$('li');
        if (items.length < 2) return false;

        const lastLi = items[items.length - 1];
        await lastLi.click();

        console.log('‚û° –ö–ª–∏–∫ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –∂–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        await sleep(7000); // –ñ–¥—ë–º 7 —Å–µ–∫—É–Ω–¥

        return true;
    } catch (error) {
        console.log('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', error.message);
        return false;
    }
}

(async () => {
    const browser = await puppeteer.launch({
        headless: false,
        defaultViewport: null,
        args: ['--start-maximized']
    });

    const page = await browser.newPage();
    await loadCookies(page); // üü¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏
    await page.goto('https://cp.unisender.com/ru/v5/campaigns', { waitUntil: 'networkidle2' }); // üü¢ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º
    await tryLoginIfNeeded(page); // üü† –ï—Å–ª–∏ –Ω–∞–¥–æ ‚Äî –ª–æ–≥–∏–Ω–∏–º—Å—è
    await ensureCorrectPage(page); // üü° –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º—ã —Ç–∞–º, –≥–¥–µ –Ω—É–∂–Ω–æ

    try {
        let isFirstPage = true;

        while (true) {
            console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
            createWriter(!isFirstPage);
            isFirstPage = false;

            const hasCards = await parsePage(page);
            if (!hasCards) break;

            const hasNext = await clickNextPage(page);
            if (!hasNext) break;

            await sleep(1500);
        }

        console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω');
    } catch (err) {
        await waitForUserOnError(err);
    } finally {
        console.log('üßæ CSV —Ñ–∞–π–ª –≥–æ—Ç–æ–≤: unisender_campaigns.csv');
        // await browser.close();
    }
})();
